1602867072460:(doc tagged-literal)
1602867109674:tagged-literal
1602867468687:(tagged-literal\n )
1602867482985:(tagged-literal "hie" "boo"\n                )
1602867495698:(tagged-literal "hie" 'boo)
1602867501683:(tagged-literal 'boo "hi"\n                )
1602867769357:(use 'com.rpl.specter)
1602867785784:(transform [MAP-VALS MAP-VALS]\n              inc\n              {:a {:aa 1} :b {:ba -1 :bb 2}})
1602867833213:(transform [MAP-VALS MAP-VALS]\n              #(tagged-literal 'selected %)\n              {:a {:aa 1} :b {:ba -1 :bb 2}})
1602867877548:(def m2 (transform [MAP-VALS MAP-VALS]\n              #(tagged-literal 'selected %)\n              {:a {:aa 1} :b {:ba -1 :bb 2}}))
1602867878624:m2
1602867908982:(transform [MAP-VALS MAP-VALS] inc m2)
1603182855667:(doc map)
1603182867580:(require 'clojure.repl)
1603182871341:(doc map)
1603182885167:(require 'clojure.repl :refer [doc])
1603182919347:(require 'clojure.repl)
1603182924270:(repl/doc\n )
1603182962776:(require 'clojure.repl)
1603182972253:(use 'com.rpl.specter)
1603183006769:(def m2 (transform [MAP-VALS MAP-VALS]\n              #(tagged-literal 'selected %)\n              {:a {:aa 1} :b {:ba -1 :bb 2}}))
1603183008561:m2
1603183057270:(doc specter)
1603183070772:(require 'clojure.repl/doc)
1603183078182:(require 'clojure.repl)
1603183083490:(use 'clojure.repl)
1603183087272:(doc map)
1603183109740:specter
1603183124006:(doc com.rpl.specter)
1603188395501:(require 'com.rpl.specter)
1603188421430:(require 'com.rpl.specter :as specter)
1603188426129:(require 'com.rpl.specter :as 'specter)
1603188437469:(require 'com.rpl.specter :as specter)
1603188442554:(require 'com.rpl.specter :as [specter])
1603188529403:(require com.rpl.specter [:refer transform])
1603188540192:transform
1603188544727:(require com.rpl.specter :refer [transform])
1603188631531:(require com.rpl.specter :as specter)
1603188693651:(require '[com.rpl.specter :as specter])
1603188704483:(doc specter/transform)
1603188726084:(use 'clojure.repl)
1603188728546:doc
1603188733349:(doc map)
1603189123126:(defn highlight-select [q m]\n    (specter/transform q #(tagged-literal 'highlight %) m)\n  \n  \n  )
1603189157065:(transform [MAP-VALS MAP-VALS]\n             #_=>               #(tagged-literal 'selected %)\n             #_=>               {:a {:aa 1} :b {:ba -1 :bb 2}})
1603189169585:(use 'com.rpl.specter)
1603189180283:(transform [MAP-VALS MAP-VALS]\n             #_=>               #(tagged-literal 'selected %)\n             #_=>               {:a {:aa 1} :b {:ba -1 :bb 2}})
1603189200494:(def m {:a {:aa 1} :b {:ba -1 :bb 2}})
1603189213400:(def q [MAP-VALS MAP-VALS])
1603189228745:(highlight-select q m)
1603741568406:(require '[com.rpl.specter :as specter])
1603741573175:(use 'com.rpl.specter)
1603741580450:(eval "")
1603741590935:(resolve\n 'a\n )
1603741605364:(def a a')
1603741611993:(def a 'a\n  )
1603741614124:(resolve\n 'a\n )
1603741665889:(edn/read-string "{:a 1}")
1603741685165:(require '[clojure.edn :as edn\n           ])
1603741686887:(edn/read-string "{:a 1}")
1603741729071:(edn/read-string "{:a 'a}")
1603741736015:(map resolve (edn/read-string "{:a 'a}"))
1603741755003:(resolve :a)
1603741769132:(map print (edn/read-string "{:a 'a}"))
1603741867443:(map print (concat (edn/read-string "{:a 'a}")))
1603741877208:(map print (flatten\n            (edn/read-string "{:a 'a}")))
1603741894354:(map print {:a 'a})
1603741907779:(map print (mapcat [[:a 'a]]))
1603741916314:(mapcat [[:a 'a]])
1603741925179:(cat [[:a 'a]])
1603741933052:(concat\n [[:a 'a]])
1603742071894:(eval {:a MAP-VALS})
1603742081418:(eval [{:a MAP-VALS}])
1603742086774:(eval "{:a MAP-VALS}")
1603742282764:(edn/read-string "{:a MAP-VALS}"\n                 )
1603742294508:(edn/read-string "{:a MAP-VALS}")
1603742299054:(second (edn/read-string "{:a MAP-VALS}"))
1603742308607:(vals (edn/read-string "{:a MAP-VALS}"))
1603742315358:(first (vals (edn/read-string "{:a MAP-VALS}")))
1603742320922:(eval (first (vals (edn/read-string "{:a MAP-VALS}"))))
1603742328452:(resolve (first (vals (edn/read-string "{:a MAP-VALS}"))))
1603742639434:(defn highlight-select [q m]\n  (transform q #(tagged-literal 'highlight %) m))
1603742662220:(highlight-select [MAP-VALS] {:a 1})
1604345665229:(mapv resolve ['a])
1604345676722:(mapv resolve ['MAP-VALS\n               ])
1604345692882:(require '[com.rpl.specter :as specter :refer [MAP-VALS]])
1604345697706:(mapv resolve ['MAP-VALS\n               ])
1604345702378:(mapv resolve [MAP-VALS\n               ])
1604346476596:highlight
1604346502181:(requre '[ouija.highlight :refer [highlight])
1604346565399:(require '[ouija.highlight :refer [highlight]])
1604346581984:(highlight [MAP-VALS] {:a 1})
1604346586247:(highlight ['MAP-VALS] {:a 1})
1604346866651:(edn/read-string "[MAP-VALS]")
1604346896779:(require '[clojure.edn :as edn\n           ])
1604346899684:(edn/read-string "[MAP-VALS]")
1604347529931:(resolve MAP-VALS)
1604347536029:(resolve (symbol MAP-VALS))
1604347543883:MAP-VALS
1604347556029:(require '[com.rpl.specter :as specter :refer [MAP-VALS]])
1604347558045:MAP-VALS
1604347560100:(resolve (symbol MAP-VALS))
1604347567662:(resolve (symbol (str MAP-VALS)))
1604347575341:(str MAP-VALS)
1604347581437:(str '\n      MAP-VALS)
1604347588861:(symbol (str 'MAP-VALS))
1604347593798:(resolve (symbol (str 'MAP-VALS)))
1604347607981:(resolve MAP-VALS)
1604347614615:(resolve (symbol MAP-VALS))
1604347766272:specter/MAP-VALS
1604347779296:(def d {'MAP-VALS specter/MAP-VALS})
1604347785855:(d MAP-VALS)
1604347791104:(d 'MAP-VALS)
1604348117055:(-> (the-ns 'com.rpl.specter) ns-publics keys)
1604425597385:(require '[com.rpl.specter :as specter :refer [MAP-VALS]])
1604425607961:(doc the-ns)
1604425621984:(require '[clojure.repl :refer [doc]])
1604425625366:(doc the-ns)
1604425641889:(the-ns 'com.rpl.specter)
1604425650591:(doc ns-publics)
1604425700264:(in-ns 'user)
1604425718064:(in-ns 'com.rpl.specter\n       )
1604425788600:(-> 'com.rpl.specter the-ns ns-publics)
1604425794096:(-> 'com.rpl.specter the-ns ns-publics keys)
1604428997227:(require '[clojure.repl :refer [doc]])
1604429008369:(require '[com.rpl.specter :as specter :refer [MAP-VALS]])
1604429042555:(require '[ouija.highlight :refer [highlight]])
1604429212004:(highlight [MAP-VALS MAP-VALS] {1 {2 3}}\n           )
1604429269917:[1 2 3]
1604430187084:(ns-publics 'com.rpl.specter)
1604430204301:(type (ns-publics 'com.rpl.specter))
1604430217283:(ALL (ns-publics 'com.rpl.specter))
1604430222643:('ALL (ns-publics 'com.rpl.specter))
1604430427328:(def d (ns-publics 'com.rpl.specter))
1604430460040:(map #(get d % %) [ALL])
1604430463719:(map #(get d % %) '[ALL])
1604430472704:(map #(get d % %) '[ALL (filterer odd?)])
1604430489064:(filterer d)
1604430492439:('filterer d)
1604430498560:(odd? d)
1604430505696:('odd? d)
1604430510615:('odd? d 'odd?\n       )
1604430782940:(require '[clojure.walk :refer [postwalk]])
1604430786491:(require '[clojure.walk :refer [postwalk]])\nk
1604430799972:(def v '[(filterer odd?) LAST])
1604430812924:(postwalk d v)
1604430827309:(postwalk identity v)
1604430830028:d
1604430837716:(postwalk d\n          v)
1604430843892:(postwalk d v)
1604430857972:(postwalk #(println %) v)
1604430862412:v
1604430896398:(def x [1 [1 2] [4 [5]]])
1604430904823:(postwalk inc x)
1604430975086:(postwalk #(get d % %) v)
1604431076807:(require '[clojure.walk :refer [postwalk]])\nk
1604431115479:(require '[clojure.walk :refer [postwalk]])
